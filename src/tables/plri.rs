pub const X8: bool = true;
pub const X16_32: bool = false;
pub const PLURIBYTE: &[(u8, bool, [&'static str;2])] = 
&[
	(0x04, X8, ["add al, $";2]),
	(0x05, X16_32, ["add eax, $","add ax, $"]),
	(0x14, X8, ["adc al, $";2]),
	(0x15, X16_32, ["adc eax, $","adc ax, $"]),
	(0x24, X8, ["and al, $";2]),
	(0x25, X16_32, ["and eax, $","and ax, $"]),
	(0x34, X8, ["xor al, $";2]),
	(0x35, X16_32, ["xor eax, $","xor ax, $"]),
	(0x0c, X8, ["or al, $";2]),
	(0x0d, X16_32, ["or eax, $","or ax, $"]),
	(0x1c, X8, ["sbb al, $";2]),
	(0x1d, X16_32, ["sbb eax, $","sbb ax, $"]),
	(0x2c, X8, ["sub al, $";2]),
	(0x2d, X16_32, ["sub eax, $","sub ax, $"]),
	(0x3c, X8, ["cmp al, $";2]),
	(0x3d, X16_32, ["cmp eax, $","cmp ax, $"]),
	(0x68, X16_32, ["push $","pushw $"]),
	(0x6a, X8, ["push $";2]),
	(0x70, X8, ["jo $";2]),
	(0x71, X8, ["jno $";2]),
	(0x72, X8, ["jb $";2]),
	(0x73, X8, ["jnb $";2]),
	(0x74, X8, ["je $";2]),
	(0x75, X8, ["jnz $";2]),
	(0x76, X8, ["jbe $";2]),
	(0x77, X8, ["ja $";2]),
	(0x78, X8, ["js $";2]),
	(0x79, X8, ["jns $";2]),
	(0x7a, X8, ["jp $";2]),
	(0x7b, X8, ["jnp $";2]),
	(0x7c, X8, ["jl $";2]),
	(0x7d, X8, ["jnl $";2]),
	(0x7e, X8, ["jle $";2]),
	(0x7f, X8, ["jnle $";2]),
	(0x9a, X16_32, ["call $","callw $"]),
	(0xa0, X16_32, ["mov al, $";2]),
	(0xa1, X16_32, ["mov eax, @:[$]","mov ax, @:[$]"]), // ds:0xffffffff
	(0xa2, X16_32, ["mov @:[$], al";2]),
	(0xa3, X16_32, ["mov @:[$], eax","mov @:[$], ax"]),
	(0xa8, X8, ["test al, $";2]),
	(0xa9, X16_32, ["test eax, $","test ax, $"]),
	(0xb0, X8, ["mov al, $";2]),
	(0xb1, X8, ["mov cl, $";2]),
	(0xb2, X8, ["mov dl, $";2]),
	(0xb3, X8, ["mov bl, $";2]),
	(0xb4, X8, ["mov ah, $";2]),
	(0xb5, X8, ["mov ch, $";2]),
	(0xb6, X8, ["mov dh, $";2]),
	(0xb7, X8, ["mov bh, $";2]),
	(0xb8, X16_32,["mov eax, $","mov ax, $"]),
	(0xb9, X16_32, ["mov ecx, $","mov cx, $"]),
	(0xba, X16_32, ["mov edx, $","mov dx, $"]),
	(0xbb, X16_32, ["mov ebx, $","mov bx, $"]),
	(0xbc, X16_32, ["mov esp, $","mov sp, $"]),
	(0xbd, X16_32, ["mov ebp, $","mov bp, $"]),
	(0xbe, X16_32, ["mov esi, $","mov si, $"]),
	(0xbf, X16_32, ["mov edi, $","mov di, $"]),
	(0xc2, X16_32, ["ret $","retw $"]),
	(0xca, X16_32, ["retf $","retfw $"]),
	(0xcd, X8, ["int $";2]),
	(0xd4, X8, ["aam $";2]),
	(0xd5, X8, ["aad $";2]),
	(0xe0, X8, ["loopnz $";2]),
	(0xe1, X8, ["loopz $";2]),
	(0xe2, X8, ["loop $";2]),
	(0xe3, X8, ["jcxz $";2]),
	(0xe4, X8, ["in al, $";2]),
	(0xe5, X8, ["in eax, $","in ax, $"]),
	(0xe6, X8, ["out $, al";2]),
	(0xe7, X8, ["out $, eax","out $, ax"]),
	(0xe8, X16_32, ["call $","callw $"]),
	(0xe9, X16_32, ["jmp $","jmpw $"]),
	(0xea, X16_32, ["jmp $","jmpw $"]),
	(0xeb, X8, ["jmp $";2])
];	
pub const PLURIBYTE_0F: &[(u8, bool, [&'static str;2])]  = 
&[
	(0x80, X16_32, ["jo $";2]),
	(0x81, X16_32, ["jno $";2]),
	(0x82, X16_32, ["jb $";2]),
	(0x83, X16_32, ["jnb $";2]),
	(0x84, X16_32, ["jz $";2]),
	(0x85, X16_32, ["jnz $";2]),
	(0x86, X16_32, ["jbe $";2]),
	(0x87, X16_32, ["jnbe $";2]),
	(0x88, X16_32, ["js $";2]),
	(0x89, X16_32, ["jns $";2]),
	(0x8a, X16_32, ["jp $";2]),
	(0x8b, X16_32, ["jnp $";2]),
	(0x8c, X16_32, ["jl $";2]),
	(0x8d, X16_32, ["jnl $";2]),
	(0x8e, X16_32, ["jle $";2]),
	(0x8f, X16_32, ["jnle $";2])
];
pub const RELATIVE_DISPLACEMENT: &[u8] = 
&[
	0xe8, 0xe9, 0xeb, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 
	0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 
	0x7f, 0xe0, 0xe1, 0xe2, 0xe3, 0xea, 0x9a
];
pub const RELATIVE_DISPLACEMENT_0F: &[u8] = 
&[
	0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,
	0x8a,0x8b,0x8c,0x8d,0x8e,0x8f
];